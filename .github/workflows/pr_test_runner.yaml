name: PR Test Runner

on:
  pull_request:
    types: [opened, reopened, synchronize]

permissions:
  contents: read
  pull-requests: write

jobs:
  run-tests:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2

    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: '3.12.3'

    - name: Install pipenv
      run: |
        python -m pip install --upgrade pip
        pip install pipenv

    - name: Generate requirements.txt
      run: |
        pipenv requirements > requirements.txt

    - name: Install dependencies
      run: |
        pip install -r requirements.txt
        pip install pytest  # pytest를 명시적으로 설치

    - name: Run pytest
      id: pytest
      run: |
        pytest_output=$(python -m pytest -v -m req_1_basic_user_registration)
        echo "PYTEST_OUTPUT<<EOF" >> $GITHUB_ENV
        echo "$pytest_output" >> $GITHUB_ENV
        echo "EOF" >> $GITHUB_ENV
        if [ $? -ne 0 ]; then
          echo "PYTEST_FAILED=true" >> $GITHUB_ENV
        else
          echo "PYTEST_FAILED=false" >> $GITHUB_ENV
        fi

    - name: Comment PR
      uses: actions/github-script@v6
      if: always()
      with:
        github-token: ${{secrets.GITHUB_TOKEN}}
        script: |
          const { owner, repo } = context.repo;
          const issue_number = context.issue.number;
          
          const output = `#### Pytest Results 🧪
          \`\`\`
          ${{ env.PYTEST_OUTPUT }}
          \`\`\`
          
          **Result:** ${process.env.PYTEST_FAILED === 'true' ? '❌ Failed' : '✅ Passed'}`;
          
          await github.rest.issues.createComment({
            owner,
            repo,
            issue_number,
            body: output
          });